name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
    
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
    
    - name: Install dependencies
      run: |
        poetry install
    
    - name: Export requirements.txt
      continue-on-error: true  # 即使导出失败也继续执行
      run: |
        poetry export --without-hashes --output requirements.txt || echo "Failed to export requirements.txt"
        poetry export --without-hashes --with dev --output requirements-dev.txt || echo "Failed to export requirements-dev.txt"
    
    - name: Check code formatting with Black
      run: |
        poetry run black . --check
    
    - name: Lint with flake8
      run: |
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 . --count --exit-zero --ignore=E402 --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run tests with pytest
      run: |
        poetry run pytest -v --junitxml=test-results.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: test-results.xml
      if: always()
    
    - name: Upload requirements.txt
      uses: actions/upload-artifact@v3
      with:
        name: requirements
        path: |
          requirements.txt
          requirements-dev.txt
      if: success() && github.ref == 'refs/heads/main' 