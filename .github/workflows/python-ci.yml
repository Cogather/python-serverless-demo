name: CI/CD Pipeline

on:
  # 功能分支和PR触发CI
  pull_request:
    branches: [ main ]
  
  # main分支触发部署到预发布环境
  push:
    branches: [ main ]

jobs:
  test:
    name: 测试和代码检查
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      
      - name: 安装依赖
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
      
      - name: 代码检查
        run: |
          poetry run black src --check
          poetry run flake8 src
      
      - name: 运行测试
        run: poetry run pytest -v --junitxml=test-results.xml

  build:
    name: 构建Docker镜像
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: 登录Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: 构建并推送镜像
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/python-serverless-demo:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/python-serverless-demo:${{ github.sha }}

  deploy:
    name: 部署到预发环境
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: 部署到腾讯云
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.TENCENT_HOST }}
          username: ${{ secrets.TENCENT_USERNAME }}
          password: ${{ secrets.TENCENT_PASSWORD }}
          script: |
            # 登录Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            
            # 拉取最新镜像
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/python-serverless-demo:${{ github.sha }}
            
            # 停止并删除旧容器
            docker stop python-demo || true
            docker rm python-demo || true
            
            # 启动新容器
            docker run -d --name python-demo \
              -p 8000:8000 \
              --restart unless-stopped \
              ${{ secrets.DOCKERHUB_USERNAME }}/python-serverless-demo:${{ github.sha }}
            
            # 清理旧镜像
            docker image prune -f 